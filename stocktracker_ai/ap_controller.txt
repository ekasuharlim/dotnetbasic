// Program.cs
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using StockTrackingApi.Data;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddDbContext<StockTrackingDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();
app.Run();

// StockTrackingDbContext.cs
using Microsoft.EntityFrameworkCore;
using StockTrackingApi.Models;

namespace StockTrackingApi.Data
{
    public class StockTrackingDbContext : DbContext
    {
        public StockTrackingDbContext(DbContextOptions<StockTrackingDbContext> options) : base(options) { }

        public DbSet<User> Users { get; set; }
        public DbSet<Stock> Stocks { get; set; }
        public DbSet<Transaction> Transactions { get; set; }
        public DbSet<Dividend> Dividends { get; set; }
        public DbSet<ProfitLoss> ProfitLosses { get; set; }
    }
}

// Models/User.cs
namespace StockTrackingApi.Models
{
    public class User
    {
        public int UserID { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }
        public string PasswordHash { get; set; }
    }
}

// Models/Stock.cs
namespace StockTrackingApi.Models
{
    public class Stock
    {
        public int StockID { get; set; }
        public string StockCode { get; set; }
        public string StockName { get; set; }
    }
}

// Models/Transaction.cs
namespace StockTrackingApi.Models
{
    public class Transaction
    {
        public int TransactionID { get; set; }
        public int UserID { get; set; }
        public int StockID { get; set; }
        public DateTime TransactionDate { get; set; }
        public string TransactionType { get; set; } // Buy/Sell
        public int Quantity { get; set; }
        public decimal PricePerShare { get; set; }
        public decimal Amount => Quantity * PricePerShare;
    }
}

// Models/Dividend.cs
namespace StockTrackingApi.Models
{
    public class Dividend
    {
        public int DividendID { get; set; }
        public int StockID { get; set; }
        public DateTime DividendDate { get; set; }
        public decimal DividendPerShare { get; set; }
    }
}

// Models/ProfitLoss.cs
namespace StockTrackingApi.Models
{
    public class ProfitLoss
    {
        public int ProfitLossID { get; set; }
        public int UserID { get; set; }
        public int StockID { get; set; }
        public int SaleTransactionID { get; set; }
        public int PurchaseTransactionID { get; set; }
        public int SoldQuantity { get; set; }
        public decimal PurchasePrice { get; set; }
        public decimal SalePrice { get; set; }
        public decimal? Profit { get; set; }
        public decimal? Loss { get; set; }
    }
}

// Controllers/UsersController.cs
using Microsoft.AspNetCore.Mvc;
using StockTrackingApi.Data;
using StockTrackingApi.Models;
using System.Linq;

[ApiController]
[Route("api/[controller]")]
public class UsersController : ControllerBase
{
    private readonly StockTrackingDbContext _context;
    public UsersController(StockTrackingDbContext context)
    {
        _context = context;
    }
    
    [HttpGet]
    public IActionResult GetUsers()
    {
        return Ok(_context.Users.ToList());
    }
    
    [HttpPost]
    public IActionResult CreateUser(User user)
    {
        _context.Users.Add(user);
        _context.SaveChanges();
        return CreatedAtAction(nameof(GetUsers), new { id = user.UserID }, user);
    }
}

// Controllers/TransactionsController.cs
[ApiController]
[Route("api/[controller]")]
public class TransactionsController : ControllerBase
{
    private readonly StockTrackingDbContext _context;
    public TransactionsController(StockTrackingDbContext context)
    {
        _context = context;
    }
    
    [HttpGet]
    public IActionResult GetTransactions()
    {
        return Ok(_context.Transactions.ToList());
    }
    
    [HttpPost]
    public IActionResult CreateTransaction(Transaction transaction)
    {
        _context.Transactions.Add(transaction);
        _context.SaveChanges();
        return CreatedAtAction(nameof(GetTransactions), new { id = transaction.TransactionID }, transaction);
    }
}
